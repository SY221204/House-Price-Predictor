# -*- coding: utf-8 -*-
"""House_Price_Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SFRCJ_nC-C6lNFKUsCrC_uPEf1dffobW
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder

# 1. Load dataset
df = pd.read_csv("house_price_prediction.csv")



# 3. Encode 'Location'
encoder = OneHotEncoder(sparse_output=False)
location_encoded = encoder.fit_transform(df[["Location"]])
location_df = pd.DataFrame(location_encoded, columns=encoder.get_feature_names_out(["Location"]))

# Merge encoded columns with main data
df_encoded = pd.concat([df.drop("Location", axis=1), location_df], axis=1)

# 4. Features & Target
X = df_encoded.drop("Price", axis=1)
y = df_encoded["Price"]

# 5. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 6. Train model
model = LinearRegression()
model.fit(X_train, y_train)

# 7. Predictions & performance
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nüìä Model Evaluation")
print(f"Mean Squared Error: {mse:.2f}")
print(f"R¬≤ Score: {r2:.2f}")

# 8. Predict for a new house
print("\nüè† House Price Prediction")
area = float(input("Enter house area (in sq ft): "))
location = input("Enter location (Delhi, Mumbai, Bangalore, Kolkata): ") .title().strip()
bedrooms = int(input("Enter number of bedrooms: "))

# Encode location without warnings
location_input = encoder.transform(pd.DataFrame({"Location": [location]}))

new_data = pd.DataFrame([[area, bedrooms] + list(location_input[0])],
                        columns=["Area", "Bedrooms"] + list(encoder.get_feature_names_out(["Location"])))


predicted_price = model.predict(new_data)[0]
predicted_price_crore = predicted_price / 10000000
print(f"Predicted House Price: ‚Çπ {predicted_price_crore:.2f} Crore")

